{"version":3,"sources":["components/editor/TypeDropdown.tsx","components/RecordList.tsx"],"names":["TypeDropdown","className","disableDeposit","children","value","onChange","intl","useIntl","target","messages","INCOME","EXPENSES","DEPOSIT","RecordList","useState","filter","setFilter","useRecord","list","store","dispatch","onFilterChange","useEffect","action","useCallback","params","type","useEvents","doClear","tagName","id","border","b","ALL_OPTION","onClick","margin","map","data","key","uid","width","def","md","lg","record","length"],"mappings":"+GAAA,2BAsCeA,IAxBkB,SAAC,GAM3B,IAAD,IALJC,iBAKI,MALQ,GAKR,MAJJC,sBAII,SAHJC,EAGI,EAHJA,SACAC,EAEI,EAFJA,MACAC,EACI,EADJA,SAEMC,EAAOC,cAEb,OACE,4BAAQN,UAAS,uBAAoBA,GAAcG,MAAQA,EAAQC,SACjE,gBAAGG,EAAH,EAAGA,OAAH,OAAgBH,EAASG,EAAOJ,SAE9BD,EACF,4BAAQC,MAAM,UAAWE,EAAKG,SAASC,QACvC,4BAAQN,MAAM,YAAaE,EAAKG,SAASE,UAEvCT,EAAiB,KACjB,4BAAQE,MAAM,WAAYE,EAAKG,SAASG,Y,gHC+CjCC,UAlDQ,WACrB,IAAMP,EAAOC,cADc,EAEGO,mBAAS,OAFZ,mBAEnBC,EAFmB,KAEXC,EAFW,OAGuBC,cAAvBC,EAHA,EAGnBC,MAASX,OAAUU,KAAUE,EAHV,EAGUA,SAC7BC,EAfQ,SAAC,GAA0C,IAAxCD,EAAuC,EAAvCA,SAAUJ,EAA6B,EAA7BA,UAG7B,OAFAM,oBAAU,kBAAMF,EAAS,CAAEG,OAAQ,UAAW,CAAEH,IAEzC,CACLC,eAAgBG,sBAAY,SAACpB,GAC3BY,EAAUZ,GACVgB,EAAS,CAAEG,OAAQ,OAAQE,OAAQ,CAAEC,KAAM,QAAUtB,EAAQ,GAAKA,MACjE,CAAEgB,EAAUJ,KAQUW,CAAU,CAAEX,YAAWI,aAA1CC,eACFO,EAAUJ,sBAAY,kBAAMJ,EAAS,CAAEG,OAAQ,WAAY,CAAEH,IAEnE,OACE,6BACE,wBAAInB,UAAU,cACZ,uBAAGA,UAAU,oBACb,kBAAC,IAAD,CAAM4B,QAAQ,SAASC,GAAG,iBAG5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAQ,CAAEC,GAAG,IAClB,kBAAC,IAAD,CAAO/B,UAAU,cACf,kBAAC,IAAD,CAAM4B,QAAQ,QAAQC,GAAG,gBAEzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAc7B,UAAU,UAAUG,MAAQW,EAASV,SAAWgB,GAC5D,4BAAQjB,MAAM,OAAQE,EAAKG,SAASwB,aAGtC,4BAAQP,KAAK,SAASzB,UAAU,sBAAsBiC,QAAUN,GAC9D,uBAAG3B,UAAU,oBACb,kBAAC,IAAD,CAAM6B,GAAG,cAMjB,kBAAC,IAAD,CAAOK,OAAQ,CAAEH,EAAG,IAChBd,EAAKkB,IAAI,SAAAC,GAAI,OACb,kBAAC,IAAD,CAAOC,IAAG,iBAAcD,EAAKE,KAASC,MAAO,CAAEC,IAAK,GAAIC,GAAI,EAAGC,GAAI,IACjE,kBAAC,IAAD,CAAYC,OAASP,OAIvBnB,EAAK2B,OAAS,EAAI,KAClB,kBAAC,IAAD,CAAO5C,UAAU,mCACf,kBAAC,IAAD,CAAM4B,QAAQ,KAAKC,GAAG","file":"static/js/6.82d61e27.chunk.js","sourcesContent":["import React, { FC, ReactNode } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\n\r\n// TODO: Types\r\ninterface IProps {\r\n  children?: ReactNode;\r\n  className?: string;\r\n  disableDeposit?: boolean;\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\n// TODO: Components\r\nconst TypeDropdown: FC<IProps> = ({\r\n  className = '',\r\n  disableDeposit = false,\r\n  children,\r\n  value,\r\n  onChange\r\n}) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <select className={ `form-control ${ className }`} value={ value } onChange={\r\n      ({ target }) => onChange(target.value)\r\n    }>\r\n      { children }\r\n      <option value=\"income\">{ intl.messages.INCOME }</option>\r\n      <option value=\"expenses\">{ intl.messages.EXPENSES }</option>\r\n\r\n      { disableDeposit ? null : (\r\n        <option value=\"deposit\">{ intl.messages.DEPOSIT }</option>\r\n      )}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default TypeDropdown;\r\n","import React, { FC, Dispatch, useState, useEffect, useCallback, SetStateAction } from 'react';\r\nimport { FormattedMessage as Fmsg, useIntl } from 'react-intl';\r\n\r\nimport { IRequestAction, useRecord } from '../services/store/record';\r\n\r\nimport { BsContainer, BsRow, BsCol } from './grid';\r\nimport { BsInlineGroup } from './form';\r\n\r\nimport TypeDropdown from './editor/TypeDropdown';\r\nimport AmountCard from './AmountCard';\r\n\r\n\r\n// TODO: Types\r\ninterface IEventInput {\r\n  dispatch: Dispatch<IRequestAction>;\r\n  setFilter: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nconst useEvents = ({ dispatch, setFilter }: IEventInput) => {\r\n  useEffect(() => dispatch({ action: 'LIST' }), [ dispatch ]);\r\n\r\n  return {\r\n    onFilterChange: useCallback((value: string) => {\r\n      setFilter(value);\r\n      dispatch({ action: 'LIST', params: { type: 'all' === value ? '' : value }})\r\n    }, [ dispatch, setFilter ])\r\n  };\r\n}\r\n\r\nconst RecordList: FC = () => {\r\n  const intl = useIntl();\r\n  const [ filter, setFilter ] = useState('all');\r\n  const { store: { target: { list } }, dispatch } = useRecord();\r\n  const { onFilterChange } = useEvents({ setFilter, dispatch });\r\n  const doClear = useCallback(() => dispatch({ action: 'CLEAR' }), [ dispatch ]);\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"page-title\">\r\n        <i className=\"mr-2 fa fa-list\" />\r\n        <Fmsg tagName=\"strong\" id=\"RECORD_LIST\" />\r\n      </h4>\r\n\r\n      <BsContainer>\r\n        <BsRow border={{ b: true }}>\r\n          <BsCol className=\"form-group\">\r\n            <Fmsg tagName=\"label\" id=\"RECORD_TYPE\" />\r\n\r\n            <BsInlineGroup>\r\n              <TypeDropdown className=\"rounded\" value={ filter } onChange={ onFilterChange }>\r\n                <option value=\"all\">{ intl.messages.ALL_OPTION }</option>\r\n              </TypeDropdown>\r\n\r\n              <button type=\"button\" className=\"btn btn-danger ml-2\" onClick={ doClear }>\r\n                <i className=\"fa fa-plus mr-2\" />\r\n                <Fmsg id=\"CLEAR\" />\r\n              </button>\r\n            </BsInlineGroup>\r\n          </BsCol>\r\n        </BsRow>\r\n\r\n        <BsRow margin={{ b: 3 }}>\r\n          { list.map(data => (\r\n            <BsCol key={ `record-${ data.uid }` } width={{ def: 12, md: 6, lg: 4 }}>\r\n              <AmountCard record={ data } />\r\n            </BsCol>\r\n          )) }\r\n\r\n          { list.length > 0 ? null : (\r\n            <BsCol className=\"text-center mt-3 text-secondary\">\r\n              <Fmsg tagName=\"h4\" id=\"DATA_NOT_FOUND\" />\r\n            </BsCol>\r\n          )}\r\n        </BsRow>\r\n      </BsContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordList;\r\n"],"sourceRoot":""}