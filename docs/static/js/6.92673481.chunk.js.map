{"version":3,"sources":["components/editor/TypeDropdown.tsx","components/RecordList.tsx"],"names":["TypeDropdown","children","value","onChange","intl","useIntl","className","target","messages","INCOME","EXPENSES","DEPOSIT","RecordList","useState","filter","setFilter","useRecord","list","store","onFilterChange","dispatch","useEffect","action","useCallback","params","type","useEvents","tagName","id","border","b","ALL_OPTION","map","data","key","uid","width","def","md","lg","record","length"],"mappings":"+GAAA,2BA0BeA,IAfkB,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,SAAqD,IAA3CC,aAA2C,MAAnC,SAAmC,MAAzBC,gBAAyB,MAAd,aAAc,EACjFC,EAAOC,cAEb,OACE,4BAAQC,UAAU,eAAeJ,MAAQA,EAAQC,SAC/C,gBAAGI,EAAH,EAAGA,OAAH,OAAgBJ,EAASI,EAAOL,SAE9BD,EACF,4BAAQC,MAAM,UAAWE,EAAKI,SAASC,QACvC,4BAAQP,MAAM,YAAaE,EAAKI,SAASE,UACzC,4BAAQR,MAAM,WAAYE,EAAKI,SAASG,Y,wGCgD/BC,UA1CQ,WACrB,IAAMR,EAAOC,cADc,EAEGQ,mBAAS,OAFZ,mBAEnBC,EAFmB,KAEXC,EAFW,OAGuBC,cAAvBC,EAHA,EAGnBC,MAASX,OAAUU,KACnBE,EAfQ,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUL,EAA6B,EAA7BA,UAG7B,OAFAM,oBAAU,kBAAMD,EAAS,CAAEE,OAAQ,UAAW,CAAEF,IAEzC,CACLD,eAAgBI,sBAAY,SAACrB,GAC3Ba,EAAUb,GACVkB,EAAS,CAAEE,OAAQ,OAAQE,OAAQ,CAAEC,KAAM,QAAUvB,EAAQ,GAAKA,MACjE,CAAEkB,EAAUL,KAQUW,CAAU,CAAEX,YAAWK,SAJvB,EAGUA,WAC7BD,eAER,OACE,6BACE,wBAAIb,UAAU,cACZ,uBAAGA,UAAU,oBACb,kBAAC,IAAD,CAAMqB,QAAQ,SAASC,GAAG,iBAG5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAQ,CAAEC,GAAG,IAClB,kBAAC,IAAD,CAAOxB,UAAU,cACf,kBAAC,IAAD,CAAMqB,QAAQ,QAAQC,GAAG,gBAEzB,kBAAC,IAAD,CAAc1B,MAAQY,EAASX,SAAWgB,GACxC,4BAAQjB,MAAM,OAAQE,EAAKI,SAASuB,eAK1C,kBAAC,IAAD,KACId,EAAKe,IAAI,SAAAC,GAAI,OACb,kBAAC,IAAD,CAAOC,IAAG,iBAAcD,EAAKE,KAASC,MAAO,CAAEC,IAAK,GAAIC,GAAI,EAAGC,GAAI,IACjE,kBAAC,IAAD,CAAYC,OAASP,OAIvBhB,EAAKwB,OAAS,EAAI,KAClB,kBAAC,IAAD,CAAOnC,UAAU,mCACf,kBAAC,IAAD,CAAMqB,QAAQ,KAAKC,GAAG","file":"static/js/6.92673481.chunk.js","sourcesContent":["import React, { FC, ReactNode } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\n\r\n// TODO: Types\r\ninterface IProps {\r\n  children?: ReactNode;\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nconst TypeDropdown: FC<IProps> = ({ children, value = 'income', onChange = () => {}}) => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <select className=\"form-control\" value={ value } onChange={\r\n      ({ target }) => onChange(target.value)\r\n    }>\r\n      { children }\r\n      <option value=\"income\">{ intl.messages.INCOME }</option>\r\n      <option value=\"expenses\">{ intl.messages.EXPENSES }</option>\r\n      <option value=\"deposit\">{ intl.messages.DEPOSIT }</option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default TypeDropdown;\r\n","import React, { FC, Dispatch, useState, useEffect, useCallback, SetStateAction } from 'react';\r\nimport { FormattedMessage as Fmsg, useIntl } from 'react-intl';\r\n\r\nimport { useRecord } from '../services/store/record';\r\n\r\nimport { BsContainer, BsRow, BsCol } from './grid';\r\nimport TypeDropdown from './editor/TypeDropdown';\r\nimport AmountCard from './AmountCard';\r\n\r\n\r\n// TODO: Types\r\ninterface IEventInput {\r\n  dispatch: Dispatch<any>;\r\n  setFilter: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nconst useEvents = ({ dispatch, setFilter }: IEventInput) => {\r\n  useEffect(() => dispatch({ action: 'LIST' }), [ dispatch ]);\r\n\r\n  return {\r\n    onFilterChange: useCallback((value: string) => {\r\n      setFilter(value);\r\n      dispatch({ action: 'LIST', params: { type: 'all' === value ? '' : value }})\r\n    }, [ dispatch, setFilter ])\r\n  };\r\n}\r\n\r\nconst RecordList: FC = () => {\r\n  const intl = useIntl();\r\n  const [ filter, setFilter ] = useState('all');\r\n  const { store: { target: { list } }, dispatch } = useRecord();\r\n  const { onFilterChange } = useEvents({ setFilter, dispatch });\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"page-title\">\r\n        <i className=\"mr-2 fa fa-list\" />\r\n        <Fmsg tagName=\"strong\" id=\"RECORD_LIST\" />\r\n      </h4>\r\n\r\n      <BsContainer>\r\n        <BsRow border={{ b: true }}>\r\n          <BsCol className=\"form-group\">\r\n            <Fmsg tagName=\"label\" id=\"RECORD_TYPE\" />\r\n\r\n            <TypeDropdown value={ filter } onChange={ onFilterChange }>\r\n              <option value=\"all\">{ intl.messages.ALL_OPTION }</option>\r\n            </TypeDropdown>\r\n          </BsCol>\r\n        </BsRow>\r\n\r\n        <BsRow>\r\n          { list.map(data => (\r\n            <BsCol key={ `record-${ data.uid }` } width={{ def: 12, md: 6, lg: 4 }}>\r\n              <AmountCard record={ data } />\r\n            </BsCol>\r\n          )) }\r\n\r\n          { list.length > 0 ? null : (\r\n            <BsCol className=\"text-center mt-3 text-secondary\">\r\n              <Fmsg tagName=\"h4\" id=\"DATA_NOT_FOUND\" />\r\n            </BsCol>\r\n          )}\r\n        </BsRow>\r\n      </BsContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordList;\r\n"],"sourceRoot":""}